import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getTheme } from '../../../shared/styles/theme';
import ApiService from '../../../shared/services/ApiService';
import Timer from '../../../shared/components/UI/Timer';
import useTimer from '../../../shared/hooks/useTimer';
import ReassignSessionModal from '../../../shared/components/UI/ReassignSessionModal/ReassignSessionModal';

const Container = styled.div`
  padding: 20px;
`;

const SessionCard = styled.div`
  background-color: ${props => props.theme.cardBackground};
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 16px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border-left: 4px solid ${props => {
    switch (props.status) {
      case 'in_queue': return '#17a2b8';
      case 'active': return '#28a745';
      case 'assigned': return '#007bff';
      case 'created': return '#ffc107';
      default: return '#6c757d';
    }
  }};
`;

const SessionHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
`;

const SessionInfo = styled.div`
  flex: 1;
`;

const SessionId = styled.div`
  font-weight: 600;
  font-size: 1.1rem;
  color: ${props => props.theme.textColor};
`;

const SessionStatus = styled.div`
  font-size: 0.9rem;
  color: ${props => props.theme.textColorSecondary};
  margin-top: 4px;
`;

const TimerContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TimerLabel = styled.span`
  font-size: 0.9rem;
  color: ${props => props.theme.textColorSecondary};
`;

const SessionDetails = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 12px;
  margin-bottom: 16px;
`;

const DetailItem = styled.div`
  display: flex;
  flex-direction: column;
`;

const DetailLabel = styled.span`
  font-size: 0.8rem;
  color: ${props => props.theme.textColorSecondary};
  margin-bottom: 4px;
`;

const DetailValue = styled.span`
  font-size: 0.9rem;
  color: ${props => props.theme.textColor};
  font-weight: 500;
`;

const ActionButtons = styled.div`
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
`;

const ActionButton = styled.button`
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  &.start {
    background-color: #28a745;
    color: white;
    
    &:hover:not(:disabled) {
      background-color: #218838;
    }
  }

  &.complete {
    background-color: #dc3545;
    color: white;
    
    &:hover:not(:disabled) {
      background-color: #c82333;
    }
  }

  &.cancel {
    background-color: #6c757d;
    color: white;
    
    &:hover:not(:disabled) {
      background-color: #5a6268;
    }
  }
`;

const LoadingSpinner = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 40px;
  font-size: 1.1rem;
  color: ${props => props.theme.textColorSecondary};
`;

const ErrorMessage = styled.div`
  color: #dc3545;
  padding: 16px;
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  border-radius: 6px;
  margin-bottom: 16px;
`;

const EmptyMessage = styled.div`
  text-align: center;
  padding: 40px;
  color: ${props => props.theme.textColorSecondary};
  font-size: 1.1rem;
`;

const formatDateTime = (dateString) => {
  return new Date(dateString).toLocaleString('ru-RU');
};

const formatAmount = (amount) => {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0
  }).format(amount / 100);
};

const getStatusText = (status) => {
  switch (status) {
    case 'created': return '–°–æ–∑–¥–∞–Ω–∞';
    case 'in_queue': return '–í –æ—á–µ—Ä–µ–¥–∏';
    case 'assigned': return '–ù–∞–∑–Ω–∞—á–µ–Ω–∞';
    case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
    default: return status;
  }
};

const getServiceTypeText = (serviceType) => {
  switch (serviceType) {
    case 'wash': return '–ú–æ–π–∫–∞';
    case 'air_dry': return '–°—É—à–∫–∞';
    case 'vacuum': return '–ü—ã–ª–µ—Å–æ—Å';
    default: return serviceType;
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è —Ö–∏–º–∏–∏ –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞!)
const ChemistryEnableButton = ({ session, onEnable, actionLoading }) => {
  return (
    <ActionButton
      className="chemistry"
      onClick={() => onEnable(session.id)}
      disabled={actionLoading[session.id]}
      style={{ backgroundColor: '#4CAF50', color: 'white' }}
    >
      {actionLoading[session.id] ? '–í–∫–ª—é—á–µ–Ω–∏–µ...' : `üß™ –í–∫–ª—é—á–∏—Ç—å —Ö–∏–º–∏—é (${session.chemistry_time_minutes} –º–∏–Ω)`}
    </ActionButton>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ —Ö–∏–º–∏–∏ –≤ –∫–∞—Å—Å–∏—Ä—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
const ChemistryTimer = ({ session }) => {
  const [chemistryTimeLeft, setChemistryTimeLeft] = useState(null);

  useEffect(() => {
    if (!session || !session.chemistry_started_at || session.chemistry_ended_at) {
      setChemistryTimeLeft(null);
      return;
    }

    const updateChemistryTimer = () => {
      const startTime = new Date(session.chemistry_started_at);
      const now = new Date();
      const timeLimit = (session.chemistry_time_minutes || 0) * 60 * 1000;
      const timePassed = now - startTime;
      const remaining = timeLimit - timePassed;

      if (remaining <= 0) {
        setChemistryTimeLeft(0);
      } else {
        setChemistryTimeLeft(Math.floor(remaining / 1000));
      }
    };

    updateChemistryTimer();
    const interval = setInterval(updateChemistryTimer, 1000);

    return () => clearInterval(interval);
  }, [session]);

  // –ï—Å–ª–∏ —Ö–∏–º–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (—Å—Ç–∞—Ç—É—Å —É–∂–µ –≤ ChemistryStatus –≤—ã—à–µ)
  if (session.chemistry_ended_at) {
    return null;
  }

  // –ï—Å–ª–∏ —Ö–∏–º–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  if (session.was_chemistry_on && session.chemistry_started_at && chemistryTimeLeft !== null && chemistryTimeLeft > 0) {
    return (
      <div style={{ marginTop: '8px', padding: '8px', backgroundColor: '#e8f5e9', borderRadius: '6px', border: '1px solid #4caf50' }}>
        <div style={{ fontSize: '11px', color: '#2e7d32', fontWeight: 'bold' }}>
          üß™ –•–∏–º–∏—è: {Math.floor(chemistryTimeLeft / 60)}:{(chemistryTimeLeft % 60).toString().padStart(2, '0')}
        </div>
      </div>
    );
  }

  return null;
};

const ChemistryStatus = styled.div`
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.9rem;
  color: ${props => props.theme.textColor};
  font-weight: 500;
`;

const ChemistryIcon = styled.span`
  font-size: 1rem;
`;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
const SessionCardComponent = ({ session, onStart, onComplete, onCancel, onEnableChemistry, onReassign, actionLoading, theme }) => {
  const { timeLeft } = useTimer(session);

  const getChemistryStatus = () => {
    if (!session.with_chemistry) {
      return { text: '–ë–µ–∑ —Ö–∏–º–∏–∏', icon: '‚ùå', color: '#6c757d' };
    }
    const chemistryTime = session.chemistry_time_minutes || 0;
    if (session.was_chemistry_on) {
      return { text: `–•–∏–º–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (${chemistryTime} –º–∏–Ω)`, icon: 'üß™‚úÖ', color: '#28a745' };
    }
    return { text: `–•–∏–º–∏—è –æ–ø–ª–∞—á–µ–Ω–∞ (${chemistryTime} –º–∏–Ω)`, icon: 'üß™', color: '#ffc107' };
  };

  const chemistryStatus = getChemistryStatus();

  return (
    <SessionCard theme={theme} status={session.status}>
      <SessionHeader>
        <SessionInfo>
          <SessionId theme={theme}>–°–µ—Å—Å–∏—è #{session.id}</SessionId>
          <SessionStatus theme={theme}>
            {getStatusText(session.status)}
          </SessionStatus>
        </SessionInfo>
        
        {(session.status === 'active' || session.status === 'assigned') && timeLeft !== null && (
          <TimerContainer>
            <TimerLabel theme={theme}>–û—Å—Ç–∞–ª–æ—Å—å:</TimerLabel>
            <Timer seconds={timeLeft} theme="light" />
          </TimerContainer>
        )}
        
        {/* –¢–∞–π–º–µ—Ä —Ö–∏–º–∏–∏ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞) */}
        {session.status === 'active' && session.with_chemistry && session.was_chemistry_on && (
          <ChemistryTimer session={session} />
        )}
      </SessionHeader>

      <SessionDetails>
        <DetailItem>
          <DetailLabel theme={theme}>–¢–∏–ø —É—Å–ª—É–≥–∏</DetailLabel>
          <DetailValue theme={theme}>
            {getServiceTypeText(session.service_type)}
          </DetailValue>
        </DetailItem>

        <DetailItem>
          <DetailLabel theme={theme}>–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã</DetailLabel>
          <DetailValue theme={theme}>
            {session.car_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}
          </DetailValue>
        </DetailItem>

        <DetailItem>
          <DetailLabel theme={theme}>–ù–æ–º–µ—Ä –±–æ–∫—Å–∞</DetailLabel>
          <DetailValue theme={theme}>
            {session.box_number ? `–ë–æ–∫—Å ${session.box_number}` : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
          </DetailValue>
        </DetailItem>

        <DetailItem>
          <DetailLabel theme={theme}>–•–∏–º–∏—è</DetailLabel>
          <ChemistryStatus theme={theme} style={{ color: chemistryStatus.color }}>
            <ChemistryIcon>{chemistryStatus.icon}</ChemistryIcon>
            {chemistryStatus.text}
          </ChemistryStatus>
        </DetailItem>

        <DetailItem>
          <DetailLabel theme={theme}>–í—Ä–µ–º—è –º–æ–π–∫–∏</DetailLabel>
          <DetailValue theme={theme}>
            {session.rental_time_minutes} –º–∏–Ω
            {session.extension_time_minutes > 0 && ` + ${session.extension_time_minutes} –º–∏–Ω`}
          </DetailValue>
        </DetailItem>

        <DetailItem>
          <DetailLabel theme={theme}>–°–æ–∑–¥–∞–Ω–∞</DetailLabel>
          <DetailValue theme={theme}>
            {formatDateTime(session.created_at)}
          </DetailValue>
        </DetailItem>

        {session.main_payment && (
          <DetailItem>
            <DetailLabel theme={theme}>–°—É–º–º–∞</DetailLabel>
            <DetailValue theme={theme}>
              {formatAmount(session.main_payment.amount)}
            </DetailValue>
          </DetailItem>
        )}
      </SessionDetails>

      <ActionButtons>
        {session.status === 'assigned' && (
          <ActionButton
            className="start"
            onClick={() => onStart(session.id)}
            disabled={actionLoading[session.id]}
          >
            {actionLoading[session.id] ? '–ó–∞–ø—É—Å–∫–∞–µ–º...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
          </ActionButton>
        )}

        {session.status === 'active' && (
          <ActionButton
            className="complete"
            onClick={() => onComplete(session.id)}
            disabled={actionLoading[session.id]}
          >
            {actionLoading[session.id] ? '–ó–∞–≤–µ—Ä—à–∞–µ–º...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
          </ActionButton>
        )}

        {(session.status === 'in_queue' || session.status === 'assigned') && (
          <ActionButton
            className="cancel"
            onClick={() => onCancel(session.id)}
            disabled={actionLoading[session.id]}
          >
            {actionLoading[session.id] ? '–û—Ç–º–µ–Ω—è–µ–º...' : '–û—Ç–º–µ–Ω–∏—Ç—å'}
          </ActionButton>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ö–∏–º–∏–∏ */}
        {session.status === 'active' && 
         session.with_chemistry && 
         !session.was_chemistry_on && (
          <ChemistryEnableButton
            session={session}
            onEnable={onEnableChemistry}
            actionLoading={actionLoading}
            theme={theme}
          />
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ */}
        {(session.status === 'assigned' || session.status === 'active') && (
          <ActionButton
            className="reassign"
            onClick={() => onReassign(session.id, session.service_type)}
            disabled={actionLoading[session.id]}
            style={{ backgroundColor: '#ff9800', color: 'white' }}
          >
            {actionLoading[session.id] ? '–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º...' : 'üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å'}
          </ActionButton>
        )}
      </ActionButtons>
    </SessionCard>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞—Å—Å–∏—Ä–∞
 */
const ActiveSessions = () => {
  const theme = getTheme('light');
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [actionLoading, setActionLoading] = useState({});
  const [reassignModal, setReassignModal] = useState({
    isOpen: false,
    sessionId: null,
    serviceType: null
  });

  useEffect(() => {
    loadActiveSessions();
  }, []);

  const loadActiveSessions = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await ApiService.getCashierActiveSessions();
      setSessions(response.sessions || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π');
    } finally {
      setLoading(false);
    }
  };

  const handleStartSession = async (sessionId) => {
    setActionLoading(prev => ({ ...prev, [sessionId]: true }));
    
    try {
      await ApiService.startCashierSession(sessionId);
      await loadActiveSessions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏');
    } finally {
      setActionLoading(prev => ({ ...prev, [sessionId]: false }));
    }
  };

  const handleCompleteSession = async (sessionId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?')) {
      return;
    }

    setActionLoading(prev => ({ ...prev, [sessionId]: true }));
    
    try {
      await ApiService.completeCashierSession(sessionId);
      await loadActiveSessions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
    } finally {
      setActionLoading(prev => ({ ...prev, [sessionId]: false }));
    }
  };

  const handleCancelSession = async (sessionId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?')) {
      return;
    }

    setActionLoading(prev => ({ ...prev, [sessionId]: true }));
    
    try {
      await ApiService.cancelCashierSession(sessionId);
      await loadActiveSessions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏');
    } finally {
      setActionLoading(prev => ({ ...prev, [sessionId]: false }));
    }
  };

  const handleEnableChemistry = async (sessionId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ö–∏–º–∏—é –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏?')) {
      return;
    }

    setActionLoading(prev => ({ ...prev, [sessionId]: true }));
    
    try {
      await ApiService.enableChemistryCashier(sessionId);
      await loadActiveSessions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ö–∏–º–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ö–∏–º–∏–∏: ' + (error.response?.data?.error || error.message));
    } finally {
      setActionLoading(prev => ({ ...prev, [sessionId]: false }));
    }
  };

  const handleReassignSession = async (sessionId) => {
    setActionLoading(prev => ({ ...prev, [sessionId]: true }));
    
    try {
      await ApiService.cashierReassignSession(sessionId);
      await loadActiveSessions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      setReassignModal({ isOpen: false, sessionId: null, serviceType: null });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
    } finally {
      setActionLoading(prev => ({ ...prev, [sessionId]: false }));
    }
  };

  const openReassignModal = (sessionId, serviceType) => {
    setReassignModal({
      isOpen: true,
      sessionId,
      serviceType
    });
  };

  const closeReassignModal = () => {
    setReassignModal({
      isOpen: false,
      sessionId: null,
      serviceType: null
    });
  };

  if (loading) {
    return <LoadingSpinner theme={theme}>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π...</LoadingSpinner>;
  }

  return (
    <Container theme={theme}>
      {error && (
        <ErrorMessage>{error}</ErrorMessage>
      )}

      <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
      
      {sessions.length === 0 ? (
        <EmptyMessage theme={theme}>
          –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ—Ç
        </EmptyMessage>
      ) : (
        sessions.map(session => (
          <SessionCardComponent
            key={session.id}
            session={session}
            onStart={handleStartSession}
            onComplete={handleCompleteSession}
            onCancel={handleCancelSession}
            onEnableChemistry={handleEnableChemistry}
            onReassign={openReassignModal}
            actionLoading={actionLoading}
            theme={theme}
          />
        ))
      )}

      <ReassignSessionModal
        isOpen={reassignModal.isOpen}
        onClose={closeReassignModal}
        onConfirm={handleReassignSession}
        sessionId={reassignModal.sessionId}
        serviceType={reassignModal.serviceType}
        isLoading={actionLoading[reassignModal.sessionId] || false}
      />
    </Container>
  );
};

export default ActiveSessions; 