import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './SessionHistory.module.css';
import { Card, Button, StatusBadge } from '../../../../shared/components/UI';
import { formatDate } from '../../../../shared/utils/formatters';
import { getSessionStatusDescription, formatSessionTotalCost } from '../../../../shared/utils/statusHelpers';
import ApiService from '../../../../shared/services/ApiService';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç SessionHistory - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.user - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @param {string} props.theme - –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ('light' –∏–ª–∏ 'dark')
 */
const SessionHistory = ({ user, theme = 'light' }) => {
  const navigate = useNavigate();
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(0);
  const [hasMore, setHasMore] = useState(true);
  const limit = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

  const themeClass = theme === 'dark' ? styles.dark : styles.light;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
  useEffect(() => {
    if (!user || !user.id) return;

    const fetchSessionHistory = async () => {
      try {
        setLoading(true);
        const offset = page * limit;
        const response = await ApiService.getUserSessionHistory(user.id, limit, offset);
        
        if (response && response.sessions) {
          if (page === 0) {
            setSessions(response.sessions);
          } else {
            setSessions(prevSessions => [...prevSessions, ...response.sessions]);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
          setHasMore(response.sessions.length === limit);
        } else {
          setSessions([]);
          setHasMore(false);
        }
        
        setError(null);
      } catch (err) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π: ' + err.message);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π');
      } finally {
        setLoading(false);
      }
    };

    fetchSessionHistory();
  }, [user, page, limit]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadMore = () => {
    setPage(prevPage => prevPage + 1);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–µ—Å—Å–∏–∏
  const handleViewSessionDetails = (sessionId) => {
    navigate(`/telegram/session/${sessionId}`);
  };

  return (
    <div className={styles.container}>

      {loading && page === 0 ? (
        <p className={`${styles.message} ${themeClass}`}>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π...</p>
      ) : error ? (
        <p className={`${styles.message} ${styles.error} ${themeClass}`}>{error}</p>
      ) : sessions.length === 0 ? (
        <Card theme={theme}>
          <p className={`${styles.message} ${themeClass}`}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–µ–∫</p>
        </Card>
      ) : (
        <>
          <div className={styles.sessionsList}>
            {sessions.map((session) => (
              <Card key={session.id} theme={theme} className={styles.sessionCard}>
                <div className={styles.sessionHeader}>
                  <StatusBadge status={session.status} theme={theme} />
                  <span className={`${styles.sessionDate} ${themeClass}`}>
                    {formatDate(session.created_at)}
                  </span>
                </div>
                
                <div className={styles.sessionInfo}>
                  <div className={styles.statusInfo}>
                    <div className={`${styles.statusDot} ${styles[session.status]}`}></div>
                    <span className={`${styles.statusText} ${themeClass}`}>
                      {getSessionStatusDescription(session.status, session.cooldown_minutes)}
                    </span>
                  </div>
                  {session.car_number && (
                    <div className={styles.carNumberInfo}>
                      <span className={`${styles.carNumberText} ${themeClass}`}>
                        –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {session.car_number}
                      </span>
                    </div>
                  )}
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ */}
                  {session.payment && (
                    <div className={styles.paymentInfo}>
                      <div className={styles.paymentAmount}>
                        <span className={`${styles.paymentText} ${themeClass}`}>
                          üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {session.main_payment || session.extension_payments ? 
                            formatSessionTotalCost({
                              main_payment: session.main_payment,
                              extension_payments: session.extension_payments || []
                            }) : 
                            session.payment ? `${(session.payment.amount / 100).toFixed(2)} ${session.payment.currency}` : 
                            '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                        </span>
                      </div>
                      
                      <div className={styles.paymentStatus}>
                        <span className={`${styles.paymentText} ${themeClass}`} style={{
                          color: session.payment.status === 'succeeded' ? '#4CAF50' : 
                                 session.payment.status === 'pending' ? '#FF9800' : 
                                 session.payment.status === 'refunded' ? '#2196F3' : '#F44336',
                          fontWeight: 'bold'
                        }}>
                          {session.payment.status === 'succeeded' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' :
                           session.payment.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' :
                           session.payment.status === 'failed' ? '‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã' :
                           session.payment.status === 'refunded' ? 'üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ' : session.payment.status}
                        </span>
                      </div>
                    </div>
                  )}
                </div>
                
                <Button 
                  theme={theme} 
                  onClick={() => handleViewSessionDetails(session.id)}
                  className={styles.detailsButton}
                >
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </Button>
              </Card>
            ))}
          </div>
          
          {hasMore && (
            <div className={styles.loadMoreContainer}>
              <Button 
                theme={theme} 
                onClick={loadMore}
                disabled={loading}
                className={styles.loadMoreButton}
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
              </Button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default SessionHistory;
