package telegram

import (
	"carwash_backend/internal/logger"
	"fmt"
	"strings"

	"carwash_backend/internal/config"
	"carwash_backend/internal/domain/user/models"
	"carwash_backend/internal/domain/user/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// NotificationType —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationType string

const (
	// NotificationTypeSessionExpiringSoon —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
	NotificationTypeSessionExpiringSoon NotificationType = "session_expiring_soon"
	// NotificationTypeSessionCompletingSoon —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
	NotificationTypeSessionCompletingSoon NotificationType = "session_completing_soon"
	// NotificationTypeBoxAssigned —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–∫—Å–∞
	NotificationTypeBoxAssigned NotificationType = "box_assigned"
)

// NotificationService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type NotificationService interface {
	SendSessionNotification(telegramID int64, notificationType NotificationType) error
	SendBoxAssignmentNotification(telegramID int64, boxNumber int) error
	SendSessionReassignmentNotification(telegramID int64, serviceType string) error
}

// Bot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
type Bot struct {
	bot     *tgbotapi.BotAPI
	service service.Service
	config  *config.Config
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot
func NewBot(service service.Service, config *config.Config) (*Bot, error) {
	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
	bot.Debug = false

	logger.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	return &Bot{
		bot:     bot,
		service: service,
		config:  config,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
func (b *Bot) Start() {
	logger.Info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling")

	// –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling
	_, err := b.bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
		return
	}

	logger.Info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ long polling")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates := b.bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	for update := range updates {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message != nil {
			b.handleMessage(update.Message)
		}
	}
}

// ProcessUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –≤–µ–±—Ö—É–∫–∞
func (b *Bot) ProcessUpdate(update tgbotapi.Update) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil {
		b.handleMessage(update.Message)
	}
}

// SetWebhook —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
func (b *Bot) SetWebhook() error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞
	webhookURL := fmt.Sprintf("https://%s/webhook", b.config.ServerIP)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±—Ö—É–∫–∞
	webhookConfig, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
	_, err = b.bot.Request(webhookConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	logger.Printf("–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s", webhookURL)
	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
	if message.IsCommand() && message.Command() == "start" {
		b.handleStartCommand(message)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
	b.sendHelpMessage(message.Chat.ID)
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(message *tgbotapi.Message) {
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err := b.service.CreateUser(&models.CreateUserRequest{
		TelegramID: message.From.ID,
		Username:   message.From.UserName,
		FirstName:  message.From.FirstName,
		LastName:   message.From.LastName,
	})

	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		b.sendErrorMessage(message.Chat.ID)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := "–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É/–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å."

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è mini app
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è Telegram Mini App
	miniAppURL := fmt.Sprintf("https://t.me/%s?startapp=carwash", b.config.TelegramUsername)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.InlineKeyboardButton{
				Text: "‚Üí –ù–ê–ñ–ú–ò–¢–ï –°–Æ–î–ê",
				URL:  &miniAppURL,
			},
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err = b.bot.Send(msg)
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
func (b *Bot) sendHelpMessage(chatID int64) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
	var messageText strings.Builder
	messageText.WriteString("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n")
	messageText.WriteString("/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, messageText.String())
	msg.ParseMode = "HTML"

	_, err := b.bot.Send(msg)
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (b *Bot) sendErrorMessage(chatID int64) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	_, err := b.bot.Send(msg)
	if err != nil {
		logger.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// SendSessionNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Å—Å–∏–∏
func (b *Bot) SendSessionNotification(telegramID int64, notificationType NotificationType) error {
	var messageText string

	switch notificationType {
	case NotificationTypeSessionExpiringSoon:
		messageText = "–í–Ω–∏–º–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –∏—Å—Ç–µ—á–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –º–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –º–æ–π–∫—É, –∏–Ω–∞—á–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –æ—á–µ—Ä–µ–¥—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞."
	case NotificationTypeSessionCompletingSoon:
		messageText = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤—Ä–µ–º—è –º–æ–π–∫–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è."
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", notificationType)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(telegramID, messageText)
	msg.ParseMode = "HTML"

	_, err := b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
	}

	return nil
}

// SendBoxAssignmentNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–∫—Å–∞
func (b *Bot) SendBoxAssignmentNotification(telegramID int64, boxNumber int) error {
	messageText := fmt.Sprintf("–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –±–æ–∫—Å ‚Ññ%d! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –∑–∞–µ–∑–∂–∞–π—Ç–µ –≤ –±–æ–∫—Å! –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–π–∫–∏ –≤ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", boxNumber)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è mini app
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è Telegram Mini App
	miniAppURL := fmt.Sprintf("https://t.me/%s?startapp=carwash", b.config.TelegramUsername)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.InlineKeyboardButton{
				Text: "‚Üí –ù–ê–ñ–ú–ò–¢–ï –°–Æ–î–ê",
				URL:  &miniAppURL,
			},
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(telegramID, messageText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–æ–∫—Å–∞: %v", err)
	}

	return nil
}

// SendSessionReassignmentNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
func (b *Bot) SendSessionReassignmentNotification(telegramID int64, serviceType string) error {
	var serviceText string
	switch serviceType {
	case "wash":
		serviceText = "–º–æ–π–∫–∏"
	case "air_dry":
		serviceText = "–æ–±–¥—É–≤–∞"
	case "vacuum":
		serviceText = "–ø—ã–ª–µ—Å–æ—Å–∞"
	default:
		serviceText = "—É—Å–ª—É–≥–∏"
	}

	messageText := fmt.Sprintf("üîÑ –í–∞—à–∞ —Å–µ—Å—Å–∏—è %s –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –±–æ–∫—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –±–æ–∫—Å–µ.", serviceText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(telegramID, messageText)
	msg.ParseMode = "HTML"

	_, err := b.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: %v", err)
	}

	return nil
}
