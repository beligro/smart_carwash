package handlers

import (
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"

	"carwash_backend/internal/domain/dahua/models"
	"carwash_backend/internal/domain/dahua/service"
)

// Handler –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Dahua –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
type Handler struct {
	dahuaService service.Service
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func NewHandler(dahuaService service.Service) *Handler {
	return &Handler{
		dahuaService: dahuaService,
	}
}

// ANPRWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –∫–∞–º–µ—Ä—ã Dahua –≤ —Ñ–æ—Ä–º–∞—Ç–µ ITSAPI XML
// POST /api/v1/dahua/anpr-webhook
func (h *Handler) ANPRWebhook(c *gin.Context) {
	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	body, err := io.ReadAll(c.Request.Body)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		c.Header("Content-Type", "application/xml")
		c.String(http.StatusBadRequest, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>ERROR</result>
    <message>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞</message>
</Response>`)
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º body –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
	c.Request.Body = io.NopCloser(strings.NewReader(string(body)))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
	contentType := c.GetHeader("Content-Type")

	var webhookReq *models.DahuaWebhookRequest
	var processReq *models.ProcessANPREventRequest

	// –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Content-Type
	if contentType == "application/xml" || contentType == "text/xml" {
		// –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–æ—Ä–º–∞—Ç–∞ ITSAPI
		var xmlReq models.DahuaWebhookRequest
		if err := c.ShouldBindXML(&xmlReq); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: %v", err)
			c.Header("Content-Type", "application/xml")
			c.String(http.StatusBadRequest, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>ERROR</result>
    <message>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç XML: %s</message>
</Response>`, err.Error())
			return
		}
		webhookReq = &xmlReq
		processReq = xmlReq.ToProcessRequest()
	} else {
		// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–æ—Ä–º–∞—Ç–∞ (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç –∫–∞–º–µ—Ä—ã Dahua)
		var jsonReq models.DahuaWebhookRequestJSON
		if err := c.ShouldBindJSON(&jsonReq); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
			c.JSON(http.StatusBadRequest, models.DahuaWebhookResponseJSON{
				Success: false,
				Message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: " + err.Error(),
			})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if !jsonReq.ValidatePlateNumber() {
			log.Printf("‚ùå –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
			c.JSON(http.StatusBadRequest, models.DahuaWebhookResponseJSON{
				Success: false,
				Message: "–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
			})
			return
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		webhookReq = &models.DahuaWebhookRequest{
			LicensePlate: jsonReq.GetPlateNumber(),
			Confidence:   100,   // –°—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–∞–º–µ—Ä–∞ —É–≤–µ—Ä–µ–Ω–∞
			Direction:    "out", // –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–µ–∑–¥
			EventType:    "ANPR",
			DateTime:     time.Now().Format("2006-01-02T15:04:05"),
			ImagePath:    "",
		}
		processReq = jsonReq.ToProcessRequest()
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	if !webhookReq.ValidateDirection() {
		if contentType == "application/xml" || contentType == "text/xml" {
			c.Header("Content-Type", "application/xml")
			c.String(http.StatusBadRequest, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>ERROR</result>
    <message>–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: in, out</message>
</Response>`)
		} else {
			c.JSON(http.StatusBadRequest, models.DahuaWebhookResponseJSON{
				Success: false,
				Message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: in, out",
			})
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
	response, err := h.dahuaService.ProcessANPREvent(processReq)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ANPR —Å–æ–±—ã—Ç–∏—è: %v", err)
		if contentType == "application/xml" || contentType == "text/xml" {
			c.Header("Content-Type", "application/xml")
			c.String(http.StatusInternalServerError, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>ERROR</result>
    <message>%s</message>
</Response>`, err.Error())
		} else {
			c.JSON(http.StatusInternalServerError, models.DahuaWebhookResponseJSON{
				Success: false,
				Message: err.Error(),
			})
		}
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
	log.Printf("‚úÖ ANPR —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: %s", response.Message)
	if response.UserFound {
		log.Printf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s", webhookReq.LicensePlate)
	}
	if response.SessionFound {
		log.Printf("üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: %s", response.SessionID)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
	if contentType == "application/xml" || contentType == "text/xml" {
		c.Header("Content-Type", "application/xml")
		if response.Success {
			c.String(http.StatusOK, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>OK</result>
    <message>%s</message>
</Response>`, response.Message)
		} else {
			c.String(http.StatusOK, `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <result>ERROR</result>
    <message>%s</message>
</Response>`, response.Message)
		}
	} else {
		c.JSON(http.StatusOK, models.DahuaWebhookResponseJSON{
			Success: response.Success,
			Message: response.Message,
		})
	}
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Dahua –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
// GET /api/v1/dahua/health
func (h *Handler) HealthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "Dahua –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
		"service": "dahua",
	})
}

// DeviceInfo –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç –∫–∞–º–µ—Ä—ã Dahua
// POST /NotificationInfo/DeviceInfo
func (h *Handler) DeviceInfo(c *gin.Context) {
	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	body, err := io.ReadAll(c.Request.Body)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"Result":  "Error",
			"Message": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
		})
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º body –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
	c.Request.Body = io.NopCloser(strings.NewReader(string(body)))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
	contentType := c.GetHeader("Content-Type")

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	log.Printf("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ /NotificationInfo/DeviceInfo")
	log.Printf("üìã Method: %s", c.Request.Method)
	log.Printf("üìã Headers: %v", c.Request.Header)
	log.Printf("üìÑ Body: %s", string(body))
	log.Printf("üìã Query params: %v", c.Request.URL.Query())
	log.Printf("üìã Content-Type: %s", contentType)
	log.Printf("üìã Client IP: %s", c.ClientIP())

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
	var deviceInfo models.DahuaDeviceRegistration
	if err := c.ShouldBindJSON(&deviceInfo); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –∫–∞–º–µ—Ä—ã: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"Result":  "Error",
			"Message": "Invalid JSON format",
		})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	response := models.DeviceRegistrationResponse{
		Result:    "OK",
		DeviceID:  deviceInfo.DeviceID,
		Message:   "Device registered successfully",
		Timestamp: time.Now().Format("2006-01-02T15:04:05+08:00"),
		ServerID:  "carwash-server-001",
		Status:    "Online",
	}

	log.Printf("‚úÖ –ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s (%s)",
		deviceInfo.DeviceName, deviceInfo.IPAddress)

	c.Header("Content-Type", "application/json;charset=UTF-8")
	c.JSON(http.StatusOK, response)
}

// KeepAlive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç heartbeat –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–∞–º–µ—Ä—ã Dahua
// GET/POST /NotificationInfo/KeepAlive
func (h *Handler) KeepAlive(c *gin.Context) {
	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ POST)
	var bodyContent string
	if c.Request.Method == "POST" {
		body, err := io.ReadAll(c.Request.Body)
		if err == nil {
			bodyContent = string(body)
			// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º body –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
			c.Request.Body = io.NopCloser(strings.NewReader(bodyContent))
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º heartbeat –æ—Ç –∫–∞–º–µ—Ä—ã
	log.Printf("üíì Heartbeat –æ—Ç –∫–∞–º–µ—Ä—ã –Ω–∞ /NotificationInfo/KeepAlive")
	log.Printf("üìã Method: %s", c.Request.Method)
	log.Printf("üìã Client IP: %s", c.ClientIP())
	if bodyContent != "" {
		log.Printf("üíì Heartbeat body: %s", bodyContent)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
	contentType := c.GetHeader("Content-Type")

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
	if contentType == "application/xml" || contentType == "text/xml" {
		// XML –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ITSAPI
		c.Header("Content-Type", "application/xml; charset=UTF-8")
		c.String(http.StatusOK, `<?xml version="1.0" encoding="UTF-8"?>
<HeartbeatResponse>
    <result>OK</result>
    <timestamp>%s</timestamp>
    <status>online</status>
    <nextHeartbeatInterval>30</nextHeartbeatInterval>
</HeartbeatResponse>`, time.Now().Format("2006-01-02T15:04:05+08:00"))
	} else {
		// JSON –æ—Ç–≤–µ—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
		c.JSON(http.StatusOK, gin.H{
			"success":               true,
			"message":               "Heartbeat received",
			"timestamp":             time.Now().Format("2006-01-02T15:04:05+08:00"),
			"status":                "online",
			"nextHeartbeatInterval": 30,
		})
	}
}
