#!/usr/bin/env python3
"""
–¢–µ—Å—Ç overlay Holding –∏ Input Registers
–ü–æ –∑–∞–ø—Ä–æ—Å—É –ö–∏—Ä–∏–ª–ª–∞: –∑–∞–ø–∏—Å–∞—Ç—å –≤ Holding 0,1 –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å Input 0,1
"""

import socket
import struct
import time
import logging
from typing import List, Optional
from dataclasses import dataclass

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class ModbusConfig:
    host: str = "195.208.131.189"
    port: int = 502
    unit_id: int = 1
    timeout: float = 5.0

class ModbusTCPClient:
    def __init__(self, config: ModbusConfig):
        self.config = config
        self.socket = None
        self.transaction_id = 1
    
    def connect(self) -> bool:
        try:
            if self.socket:
                self.socket.close()
            
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(self.config.timeout)
            self.socket.connect((self.config.host, self.config.port))
            logger.info(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–õ–ö210: {self.config.host}:{self.config.port}")
            return True
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            finally:
                self.socket = None
                logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ü–õ–ö210")
    
    def _send_request(self, data: bytes) -> Optional[bytes]:
        try:
            self.socket.send(data)
            response = self.socket.recv(1024)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def _create_modbus_header(self, pdu_length: int) -> bytes:
        self.transaction_id = (self.transaction_id % 65535) + 1
        return struct.pack('>HHHB', 
                          self.transaction_id,
                          0,
                          pdu_length + 1,
                          self.config.unit_id)
    
    def read_holding_registers(self, address: int, count: int) -> Optional[List[int]]:
        """–ß—Ç–µ–Ω–∏–µ Holding Registers (Function 0x03)"""
        try:
            header = self._create_modbus_header(5)
            pdu = struct.pack('>BHH', 0x03, address, count)
            request = header + pdu
            
            response = self._send_request(request)
            if not response or len(response) < 9:
                logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Holding Registers {address}")
                return None
            
            byte_count = response[8]
            if len(response) < 9 + byte_count:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            values = []
            for i in range(count):
                offset = 9 + i * 2
                value = struct.unpack('>H', response[offset:offset+2])[0]
                values.append(value)
            
            return values
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Holding Registers {address}: {e}")
            return None
    
    def read_input_registers(self, address: int, count: int) -> Optional[List[int]]:
        """–ß—Ç–µ–Ω–∏–µ Input Registers (Function 0x04)"""
        try:
            header = self._create_modbus_header(5)
            pdu = struct.pack('>BHH', 0x04, address, count)
            request = header + pdu
            
            response = self._send_request(request)
            if not response or len(response) < 9:
                logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Input Registers {address}")
                return None
            
            byte_count = response[8]
            if len(response) < 9 + byte_count:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            values = []
            for i in range(count):
                offset = 9 + i * 2
                value = struct.unpack('>H', response[offset:offset+2])[0]
                values.append(value)
            
            return values
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Input Registers {address}: {e}")
            return None
    
    def write_single_register(self, address: int, value: int) -> bool:
        """–ó–∞–ø–∏—Å—å –≤ –æ–¥–∏–Ω Holding Register (Function 0x06)"""
        try:
            header = self._create_modbus_header(5)
            pdu = struct.pack('>BHH', 0x06, address, value)
            request = header + pdu
            
            response = self._send_request(request)
            if not response:
                logger.error(f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Register {address}")
                return False
            
            # –î–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ü–õ–ö –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            logger.info(f"‚úì –ó–∞–ø–∏—Å—å –≤ Holding Register {address} = {value}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Holding Register {address}: {e}")
            return False

def test_overlay_registers():
    """–¢–µ—Å—Ç overlay Holding –∏ Input Registers –ø–æ –∑–∞–ø—Ä–æ—Å—É –ö–∏—Ä–∏–ª–ª–∞"""
    print("üîÑ –¢–ï–°–¢ OVERLAY HOLDING + INPUT REGISTERS")
    print("=" * 60)
    
    config = ModbusConfig()
    client = ModbusTCPClient(config)
    
    if not client.connect():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ü–õ–ö210")
        return
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        test_values = [0x1234, 0x5678]  # –î–ª—è Register 0 –∏ 1
        
        print(f"\nüìù –ü–õ–ê–ù –¢–ï–°–¢–ê:")
        print(f"1. –ó–∞–ø–∏—Å–∞—Ç—å –≤ Holding Register 0 = {test_values[0]} (0x{test_values[0]:04X})")
        print(f"2. –ó–∞–ø–∏—Å–∞—Ç—å –≤ Holding Register 1 = {test_values[1]} (0x{test_values[1]:04X})")
        print(f"3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å Holding Registers 0-1")
        print(f"4. –ü—Ä–æ—á–∏—Ç–∞—Ç—å Input Registers 0-1")
        print(f"5. –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –®–∞–≥ 1: –ó–∞–ø–∏—Å—å –≤ Holding Register 0
        print(f"\nüîß –®–ê–ì 1: –ó–∞–ø–∏—Å—å –≤ Holding Register 0")
        success = client.write_single_register(0, test_values[0])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏ Register 0: {'‚úì –£—Å–ø–µ—à–Ω–æ' if success else '‚úó –û—à–∏–±–∫–∞'}")
        
        time.sleep(0.5)
        
        # –®–∞–≥ 2: –ó–∞–ø–∏—Å—å –≤ Holding Register 1
        print(f"\nüîß –®–ê–ì 2: –ó–∞–ø–∏—Å—å –≤ Holding Register 1")
        success = client.write_single_register(1, test_values[1])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏ Register 1: {'‚úì –£—Å–ø–µ—à–Ω–æ' if success else '‚úó –û—à–∏–±–∫–∞'}")
        
        time.sleep(1)
        
        # –®–∞–≥ 3: –ß—Ç–µ–Ω–∏–µ Holding Registers 0-1
        print(f"\nüìñ –®–ê–ì 3: –ß—Ç–µ–Ω–∏–µ Holding Registers 0-1")
        holding_values = client.read_holding_registers(0, 2)
        if holding_values:
            print(f"‚úì Holding Register 0: {holding_values[0]} (0x{holding_values[0]:04X})")
            print(f"‚úì Holding Register 1: {holding_values[1]} (0x{holding_values[1]:04X})")
        else:
            print("‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Holding Registers")
        
        # –®–∞–≥ 4: –ß—Ç–µ–Ω–∏–µ Input Registers 0-1
        print(f"\nüìñ –®–ê–ì 4: –ß—Ç–µ–Ω–∏–µ Input Registers 0-1")
        input_values = client.read_input_registers(0, 2)
        if input_values:
            print(f"‚úì Input Register 0: {input_values[0]} (0x{input_values[0]:04X})")
            print(f"‚úì Input Register 1: {input_values[1]} (0x{input_values[1]:04X})")
        else:
            print("‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Input Registers")
        
        # –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüîç –®–ê–ì 5: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        if holding_values and input_values:
            print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô:")
            
            for i in range(2):
                holding_val = holding_values[i]
                input_val = input_values[i]
                written_val = test_values[i]
                
                print(f"\nRegister {i}:")
                print(f"  –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Holding: {written_val} (0x{written_val:04X})")
                print(f"  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ Holding:  {holding_val} (0x{holding_val:04X}) {'‚úì' if holding_val == written_val else '‚úó'}")
                print(f"  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ Input:    {input_val} (0x{input_val:04X}) {'‚úì' if input_val == written_val else '‚úó'}")
                
                if holding_val == input_val == written_val:
                    print(f"  üéØ OVERLAY –†–ê–ë–û–¢–ê–ï–¢! –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                elif holding_val == input_val:
                    print(f"  ‚ö†Ô∏è  Holding = Input, –Ω–æ –Ω–µ —Ä–∞–≤–Ω—ã –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é")
                elif holding_val == written_val:
                    print(f"  ‚ö†Ô∏è  Holding –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–æ Input –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
                elif input_val == written_val:
                    print(f"  ‚ö†Ô∏è  Input –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–æ Holding –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
                else:
                    print(f"  ‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ")
            
            # –û–±—â–∏–π –≤—ã–≤–æ–¥
            print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            overlay_works = all(
                holding_values[i] == input_values[i] 
                for i in range(2)
            )
            
            if overlay_works:
                print("‚úÖ OVERLAY –§–£–ù–ö–¶–ò–û–ù–ò–†–£–ï–¢!")
                print("   Holding –∏ Input Registers –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                
                values_match = all(
                    holding_values[i] == test_values[i] 
                    for i in range(2)
                )
                
                if values_match:
                    print("‚úÖ –ó–ê–ü–ò–°–¨ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                    print("   –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                else:
                    print("‚ö†Ô∏è  –ó–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                    print("   –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –Ω–æ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è")
            else:
                print("‚ùå OVERLAY –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                print("   Holding –∏ Input Registers –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        elif holding_values:
            print("‚ö†Ô∏è  Holding Registers —á–∏—Ç–∞—é—Ç—Å—è, –Ω–æ Input Registers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, overlay –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ CODESYS")
            
        elif input_values:
            print("‚ö†Ô∏è  Input Registers —á–∏—Ç–∞—é—Ç—Å—è, –Ω–æ Holding Registers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("   –≠—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
        else:
            print("‚ùå –ù–∏ Holding, –Ω–∏ Input Registers –Ω–µ —á–∏—Ç–∞—é—Ç—Å—è")
            print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Modbus –≤ CODESYS")
    
    finally:
        client.disconnect()
    
    print(f"\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 60)

def main():
    print("üè≠ –ü–õ–ö210 - –¢–µ—Å—Ç Overlay Holding + Input Registers")
    print("–ó–∞–ø—Ä–æ—Å –æ—Ç –ö–∏—Ä–∏–ª–ª–∞: –∑–∞–ø–∏—Å–∞—Ç—å –≤ Holding 0,1 –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å Input 0,1")
    print()
    
    try:
        test_overlay_registers()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    main()
